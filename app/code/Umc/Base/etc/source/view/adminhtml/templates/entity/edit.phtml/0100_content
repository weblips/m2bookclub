<div id="{{entity}}-edit-container" class="category-content">
    <?php echo $block->getChildHtml('form') ?>
</div>
<script>
require([
    "jquery",
    "tinymce",
    "loadingPopup",
    "mage/backend/floating-header"
], function(jQuery, tinyMCE){

//<![CDATA[
    function {{entity}}Reset(url,useAjax){
        if(useAjax){
            var params = {active_tab_id:false};
            updateContent(url, params);
        }else{
            location.href = url;
        }
    }

    /**
    * Delete some {{EntityLabel}}
    * This routine get {{entity}}Id explicitly, so even if currently selected tree node is out of sync
    * with this form, we surely delete same {{EntityLabel}} in the tree and at backend
    */
    function {{entity}}Delete(url) {
        if (confirm('<?php echo __('Are you sure you want to delete this {{EntityLabel}}?') ?>')){
            location.href = url;
        }
    }

    /**
     * Update {{EntityLabel}} content area
     */
    function updateContent(url, params, refreshTree) {
        var node        = tree.getNodeById(tree.currentNodeId),
            parentNode  = node && node.parentNode,
            parentId,
            redirectUrl,
            params;

        params = jQuery.extend(params || {}, {
            form_key: FORM_KEY
        });

        if (params.node_name) {
            node.setText(params.node_name);
        }

        (function($){
            var ${{entity}}Container = $('#{{entity}}-edit-container'),
                messagesContainer = $('.messages');
            messagesContainer.html('');
            $.ajax({
                url: url + (url.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true' ),
                data: params,
                context: $('body'),
                showLoader: true
            }).done(function(data){
                if (data.content) {
                    var pageActions = $('.page-actions');
                    for (var i =0;i<pageActions.length;i++) {
                        if ($(pageActions[i]).data('floatingHeader')) {
                            $(pageActions[i]).floatingHeader('destroy');
                        }
                    }
                    try {
                        $('#{{entity}}-edit-container .wysiwyg-editor').each(function(index, element) {
                            tinyMCE.execCommand('mceRemoveControl', false, $(element).attr('id'));
                        });
                        ${{entity}}Container.html('');
                    } catch (e) {
                        alert(e.message);
                    }
                    ${{entity}}Container.html(data.content).trigger('contentUpdated');
                    setTimeout(function() {
                        $('#{{entity}}-edit-container .wysiwyg-editor').each(function(index, element) {
                            tinyMCE.execCommand('mceRemoveControl', false, $(element).attr('id'));
                            tinyMCE.execCommand('mceAddControl', true, $(element).attr('id'));
                        });
                        $('.page-actions').floatingHeader({
                            'title': '.{{entity}}-edit-title'
                        });
                        $('body').trigger('contentUpdated');
                        try {
                            if (refreshTree) {
                                window.refreshTreeArea();
                            }
                        } catch (e) {
                            alert(e.message);
                        };
                    }, 25);
                }

                if (data.messages && data.messages.length > 0) {
                    messagesContainer.html(data.messages);
                }
                if (data.toolbar) {
                    $('[data-ui-id="page-actions-toolbar-content-header"]').replaceWith(data.toolbar)
                }
            });
        })(jQuery);
    }

    /**
     * Refresh tree nodes after saving or deleting a category
     */
    function refreshTreeArea(transport)
    {
        var config,
            url;

        if (tree && window.editing{{Entity}}Breadcrumbs) {
            if (tree.nodeForDelete) {
                var node = tree.getNodeById(tree.nodeForDelete);
                tree.nodeForDelete = false;

                if (node) { // Check maybe tree became somehow not synced with ajax and we're trying to delete unknown node
                    node.parentNode.removeChild(node);
                    tree.currentNodeId = false;
                }
            }
            // category created - add its node
            else if (tree.addNodeTo) {
                var parent = tree.getNodeById(tree.addNodeTo);
                tree.addNodeTo = false;

                if (parent) { // Check maybe tree became somehow not synced with ajax and we're trying to add to unknown node
                    config = editing{{Entity}}Breadcrumbs[editing{{Entity}}Breadcrumbs.length - 1];

                    window.location.href = tree.buildUrl(config.id);
                }
            }

            // update all affected categories nodes names
            for (var i = 0; i < editing{{Entity}}Breadcrumbs.length; i++) {
                var node = tree.getNodeById(editing{{Entity}}Breadcrumbs[i].id);
                if (node) {
                    node.setText(editing{{Entity}}Breadcrumbs[i].text);
                }
            }
        }
    }

    function displayLoadingMask() {
        jQuery('body').loadingPopup();
    }

    window.refreshTreeArea = refreshTreeArea;
    window.updateContent = updateContent;
    window.{{entity}}Delete = {{entity}}Delete;
    window.{{entity}}Reset = {{entity}}Reset;
    window.displayLoadingMask = displayLoadingMask;
//]]>

});
</script>
