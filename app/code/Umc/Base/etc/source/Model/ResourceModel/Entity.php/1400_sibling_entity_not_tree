
    /**
     * @param \{{Namespace}}\{{Module}}\Model\{{Entity}} ${{entity}}
     * @return array
     */
    public function get{{Siblings}}Position(\{{Namespace}}\{{Module}}\Model\{{Entity}} ${{entity}})
    {
        $select = $this->getConnection()->select()->from(
            $this->{{_}}{{entity}}{{Sibling}}Table,
            ['{{sibling}}_id', 'position']
        )
        ->where(
            '{{entity}}_id = :{{entity}}_id'
        );
        $bind = ['{{entity}}_id' => (int)${{entity}}->getId()];
        return $this->getConnection()->fetchPairs($select, $bind);
    }

    /**
     * @param \{{Namespace}}\{{Module}}\Model\{{Entity}} ${{entity}}
     * @return $this
     */
    protected function {{_}}save{{Sibling}}Relation(\{{Namespace}}\{{Module}}\Model\{{Entity}} ${{entity}})
    {
        ${{entity}}->setIsChanged{{Sibling}}List(false);
        $id = ${{entity}}->getId();
        ${{siblings}} = ${{entity}}->get{{Siblings}}Data();
        if (${{siblings}} === null) {
            return $this;
        }
        $old{{Siblings}} = ${{entity}}->get{{Siblings}}Position();
        $insert = array_diff_key(${{siblings}}, $old{{Siblings}});
        $delete = array_diff_key($old{{Siblings}}, ${{siblings}});
        $update = array_intersect_key(${{siblings}}, $old{{Siblings}});
        $_update = array();
        foreach ($update as $key => $position) {
            if (isset($old{{Siblings}}[$key]) && $old{{Siblings}}[$key] != $position) {
                $_update[$key] = $position;
            }
        }
        $update = $_update;
        $adapter = $this->getConnection();
        if (!empty($delete)) {
            $condition = ['{{sibling}}_id IN(?)' => array_keys($delete), '{{entity}}_id=?' => $id];
            $adapter->delete($this->{{_}}{{entity}}{{Sibling}}Table, $condition);
        }
        if (!empty($insert)) {
            $data = [];
            foreach ($insert as ${{sibling}}Id => $position) {
                $data[] = [
                    '{{entity}}_id' => (int)$id,
                    '{{sibling}}_id' => (int)${{sibling}}Id,
                    'position' => (int)$position
                ];
            }
            $adapter->insertMultiple($this->{{_}}{{entity}}{{Sibling}}Table, $data);
        }
        if (!empty($update)) {
            foreach ($update as ${{sibling}}Id => $position) {
                $where = ['{{entity}}_id = ?' => (int)$id, '{{sibling}}_id = ?' => (int)${{sibling}}Id];
                $bind = ['position' => (int)$position];
                $adapter->update($this->{{_}}{{entity}}{{Sibling}}Table, $bind, $where);
            }
        }
        if (!empty($insert) || !empty($delete)) {
            ${{sibling}}Ids = array_unique(array_merge(array_keys($insert), array_keys($delete)));
            $this->{{_}}eventManager->dispatch(
                '{{namespace}}_{{module}}_{{entity}}_change_{{siblings}}',
                ['{{entity}}' => ${{entity}}, '{{sibling}}_ids' => ${{sibling}}Ids]
            );
        }
        if (!empty($insert) || !empty($update) || !empty($delete)) {
            ${{entity}}->setIsChanged{{Sibling}}List(true);
            ${{sibling}}Ids = array_keys($insert + $delete + $update);
            ${{entity}}->setAffected{{Sibling}}Ids(${{sibling}}Ids);
        }
        return $this;
    }
