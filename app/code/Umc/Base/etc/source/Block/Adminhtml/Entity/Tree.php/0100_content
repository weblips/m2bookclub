    /**
     * @return void
     */
    protected function _construct()
    {
        parent::_construct();
        $this->setUseAjax(0);
    }

    /**
     * Add buttons
     *
     * @return $this
     */
    protected function _prepareLayout()
    {
        $addUrl = $this->getUrl("*/*/new", ['_current' => true, '{{entity}}_id' => null, '_query' => false]);

        $this->addChild(
            'add_sub_button',
            'Magento\Backend\Block\Widget\Button',
            [
                'label' => __('Add Child {{EntityLabel}}'),
                'onclick' => "addNew('" . $addUrl . "', false)",
                'class' => 'add',
                'id' => 'add_child_{{entity}}_button',
                'style' => $this->canAddChild{{Entity}}() ? '' : 'display: none;'
            ]
        );

        if ($this->canAddChild{{Entity}}()) {
            $this->addChild(
                'add_root_button',
                'Magento\Backend\Block\Widget\Button',
                [
                    'label' => __('Add Root {{EntityLabel}}'),
                    'onclick' => "addNew('" . $addUrl . "', true)",
                    'class' => 'add',
                    'id' => 'add_root_{{entity}}_button'
                ]
            );
        }
        return parent::_prepareLayout();
    }

    /**
     * @param ${{nameAttributeCode}}Part
     * @return string
     */
    public function getSuggested{{Entities}}Json(${{nameAttributeCode}}Part)
    {
        /* @var $collection \{{Namespace}}\{{Module}}\Model\ResourceModel\{{Entity}}\Collection */
        $collection = $this->{{_}}{{entity}}CollectionFactory->create();

        /* @var $matching{{NameAttributeCode}}Collection \{{Namespace}}\{{Module}}\Model\ResourceModel\{{Entity}}\Collection */
        $matching{{NameAttributeCode}}Collection = clone $collection;
        $escaped{{NameAttributeCode}}Part = $this->{{_}}resourceHelper->addLikeEscape(
            ${{nameAttributeCode}}Part,
            ['position' => 'any']
        );
        $matching{{NameAttributeCode}}Collection->addFieldToFilter(
            '{{nameAttributeCode}}',
            ['like' => $escaped{{NameAttributeCode}}Part]
        )
        ->addFieldToFilter(
            '{{entity}}_id',
            ['neq' => {{class {{Namespace}}\{{Module}}\Model\{{Entity}}}}::TREE_ROOT_ID]
        );

        $shown{{Entities}}Ids = [];
        foreach ($matching{{NameAttributeCode}}Collection as ${{entity}}) {
            /** @var \{{Namespace}}\{{Module}}\Model\{{Entity}} ${{entity}} */
            foreach (explode('/', ${{entity}}->getPath()) as $parentId) {
                $shown{{Entities}}Ids[$parentId] = 1;
            }
        }
        $collection->addFieldToFilter(
            '{{entity}}_id',
            ['in' => array_keys($shown{{Entities}}Ids)]
        );

        ${{entities}}ById = [
            {{class {{Namespace}}\{{Module}}\Model\{{Entity}}}}::TREE_ROOT_ID => [
                'id' => {{class {{Namespace}}\{{Module}}\Model\{{Entity}}}}::TREE_ROOT_ID,
                'children' => [],
            ],
        ];
        foreach ($collection as ${{entity}}) {
            /** @var \{{Namespace}}\{{Module}}\Model\{{Entity}} ${{entity}} */
            foreach ([${{entity}}->getId(), ${{entity}}->getParentId()] as ${{entity}}Id) {
                if (!isset(${{entities}}ById[${{entity}}Id])) {
                    ${{entities}}ById[${{entity}}Id] = ['id' => ${{entity}}Id, 'children' => []];
                }
            }
            ${{entities}}ById[${{entity}}->getId()]['is_active'] = {{isActiveTreeSuggest}};
            ${{entities}}ById[${{entity}}->getId()]['label'] = ${{entity}}->get{{NameAttributeCode}}();
            ${{entities}}ById[${{entity}}->getParentId()]['children'][] = & ${{entities}}ById[${{entity}}->getId()];
        }
        return $this->{{_}}jsonEncoder->encode(${{entities}}ById[{{class {{Namespace}}\{{Module}}\Model\{{Entity}}}}::TREE_ROOT_ID]['children']);
    }

    /**
     * @return string
     */
    public function getAddRootButtonHtml()
    {
        return $this->getChildHtml('add_root_button');
    }

    /**
     * @return string
     */
    public function getAddSubButtonHtml()
    {
        return $this->getChildHtml('add_sub_button');
    }

    /**
     * @return string
     */
    public function getExpandButtonHtml()
    {
        return $this->getChildHtml('expand_button');
    }

    /**
     * @return string
     */
    public function getCollapseButtonHtml()
    {
        return $this->getChildHtml('collapse_button');
    }


    /**
     * @param bool|null $expanded
     * @return string
     */
    public function getLoadTreeUrl($expanded = null)
    {
        $params = ['_current' => true, 'id' => null, 'store' => null];
        if (is_null($expanded) && $this->{{_}}backendSession->get{{Namespace}}{{Module}}{{Entity}}IsTreeWasExpanded()
            || $expanded == true) {
            $params['expand_all'] = true;
        }
        return $this->getUrl('*/*/{{entities}}Json', $params);
    }

    /**
     * @return string
     */
    public function getNodesUrl()
    {
        return $this->getUrl('{{namespace}}_{{module}}/{{entity}}/jsonTree');
    }

    /**
     * @return string
     */
    public function getSwitchTreeUrl()
    {
        return $this->getUrl(
            '{{namespace}}_{{module}}/{{entity}}/tree',
            ['_current' => true, 'store' => null, '_query' => false, 'id' => null, 'parent' => null]
        );
    }

    /**
     * @return bool
     * @SuppressWarnings(PHPMD.BooleanGetMethodName)
     */
    public function getIsWasExpanded()
    {
        return $this->{{_}}backendSession->get{{Namespace}}{{Module}}{{Entity}}IsTreeWasExpanded();
    }

    /**
     * @return string
     */
    public function getMoveUrl()
    {
        return $this->getUrl('{{namespace}}_{{module}}/{{entity}}/move');
    }

    /**
     * @param null $parentNode{{Entity}}
     * @return array
     */
    public function getTree($parentNode{{Entity}} = null)
    {
        $rootArray = $this->{{_}}getNodeJson($this->getRoot($parentNode{{Entity}}));
        $tree = isset($rootArray['children']) ? $rootArray['children'] : [];
        return $tree;
    }

    /**
     * @param mixed $parentNode{{Entity}}
     * @return string
     */
    public function getTreeJson($parentNode{{Entity}} = null)
    {
        $rootArray = $this->{{_}}getNodeJson($this->getRoot($parentNode{{Entity}}));
        $json = $this->{{_}}jsonEncoder->encode(isset($rootArray['children']) ? $rootArray['children'] : []);
        return $json;
    }

    /**
     * Get JSON of array of {{EntitiesLabel}}, that are breadcrumbs for specified {{EntityLabel}} path
     *
     * @param string $path
     * @param string $javascriptVarName
     * @return string
     */
    public function getBreadcrumbsJavascript($path, $javascriptVarName)
    {
        if (empty($path)) {
            return '';
        }

        ${{entities}} = $this->{{_}}{{entity}}Tree->loadBreadcrumbsArray($path);
        if (empty(${{entities}})) {
            return '';
        }
        foreach (${{entities}} as $key => ${{entity}}) {
            ${{entities}}[$key] = $this->{{_}}getNodeJson(${{entities}});
        }
        return '<script>require(["prototype"], function(){' . $javascriptVarName . ' = ' . $this->{{_}}jsonEncoder->encode(
            ${{entities}}
        ) .
            ';' .
            ($this->canAddChild{{Entities}}() ? '$("add_child_{{entity}}_button").show();' : '$("add_child_{{entity}}_button").hide();') .
            '});</script>';
    }

    /**
     * Get JSON of a tree node or an associative array
     *
     * @param Node|array $node
     * @param int $level
     * @return string
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     * @SuppressWarnings(PHPMD.NPathComplexity)
     */
    protected function {{_}}getNodeJson($node, $level = 0)
    {
        // create a node from data array
        if (is_array($node)) {
            $node = new {{class Magento\Framework\Data\Tree\Node}}($node, '{{entity}}_id', new {{class Magento\Framework\Data\Tree}}());
        }

        $item = [];
        $item['text'] = $this->buildNodeName($node);

        $item['id'] = $node->getId();
        $item['path'] = $node->getData('path');

        $item['cls'] = 'folder ' . '{{treeClass}}';
        $allowMove = $this->{{_}}is{{Entity}}Moveable($node);
        $item['allowDrop'] = $allowMove;
        $item['allowDrag'] = $allowMove && ($node->getLevel() == 0 ? false : true);

        if ((int)$node->getChildrenCount() > 0) {
            $item['children'] = [];
        }

        $isParent = $this->{{_}}isParentSelected{{Entity}}($node);

        if ($node->hasChildren()) {
            $item['children'] = [];
            if (!($this->getUseAjax() && $node->getLevel() > 1 && !$isParent)) {
                foreach ($node->getChildren() as $child) {
                    $item['children'][] = $this->{{_}}getNodeJson($child, $level + 1);
                }
            }
        }

        if ($isParent || $node->getLevel() < 2) {
            $item['expanded'] = true;
        }

        return $item;
    }

    /**
     * Get {{EntityLabel}} {{NameAttributeLabel}}
     *
     * @param \Magento\Framework\DataObject $node
     * @return string
     */
    public function buildNodeName($node)
    {
        $result = $this->escapeHtml($node->get{{NameAttributeCode}}());
        return $result;
    }

    /**
     * @param Node|array $node
     * @return bool
     */
    protected function {{_}}is{{Entity}}Moveable($node)
    {
        $options = new {{class Magento\Framework\DataObject}}(['is_moveable' => true, '{{entity}}' => $node]);
        $this->_eventManager->dispatch('adminhtml_{{namespace}}_{{module}}_{{entity}}_tree_is_moveable', ['options' => $options]);
        return $options->getIsMoveable();
    }

    /**
     * @param \Magento\Framework\Data\Tree\Node $node
     * @return bool
     */
    protected function {{_}}isParentSelected{{Entity}}($node)
    {
        if ($node && $this->get{{Entity}}()) {
            $pathIds = $this->get{{Entity}}()->getPathIds();
            if (in_array($node->getId(), $pathIds)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if page loaded by outside link to {{EntityLabel}} edit
     *
     * @return boolean
     */
    public function isClearEdit()
    {
        return (bool)$this->getRequest()->getParam('clear');
    }

    /**
     * Check availability of adding root {{EntityLabel}}
     *
     * @return boolean
     */
    public function canAddRoot{{Entity}}()
    {
        $options = new {{class Magento\Framework\DataObject}}(['is_allow' => true]);
        $this->_eventManager->dispatch(
            'adminhtml_{{namespace}}_{{module}}_{{entity}}_tree_can_add_root_{{entity}}',
            ['{{entity}}' => $this->get{{Entity}}(), 'options' => $options]
        );

        return $options->getIsAllow();
    }

    /**
     * Check availability of adding child {{EntityLabel}}
     *
     * @return boolean
     */
    public function canAddChild{{Entity}}()
    {
        $options = new {{class Magento\Framework\DataObject}}(['is_allow' => true]);
        $this->_eventManager->dispatch(
            'adminhtml_{{namespace}}_{{module}}_{{entity}}_tree_can_add_child_{{entity}}',
            ['{{entity}}' => $this->get{{Entity}}(), 'options' => $options]
        );

        return $options->getIsAllow();
    }
