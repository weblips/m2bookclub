
    /**
     * Set grid params
     */
    public function _construct()
    {
        parent::_construct();
        $this->setId('{{sibling}}_grid');
        $this->setDefaultSort('position');
        $this->setDefaultDir('ASC');
        $this->setUseAjax(true);
        if ($this->get{{Entity}}()->getId()) {
            $this->setDefaultFilter(['in_{{siblings}}'=>1]);
        }
    }

    /**
     * prepare the collection

     * @return $this
     */
    protected function _prepareCollection()
    {
        /** @var \{{Namespace}}\{{Module}}\Model\ResourceModel\{{Sibling}}\Collection $collection */
        $collection = $this->{{_}}{{sibling}}CollectionFactory->create();
        if ($this->get{{Entity}}()->getId()) {
            $constraint = 'related.{{entity}}_id='.$this->get{{Entity}}()->getId();
        } else {
            $constraint = 'related.{{entity}}_id=0';
        }
        $collection->getSelect()->joinLeft(
            array('related' => $collection->getTable('{{relation_table}}')),
            'related.{{sibling}}_id=main_table.{{sibling}}_id AND '.$constraint,
            array('position')
        );
        $this->setCollection($collection);
        parent::_prepareCollection();
        return $this;
    }

    /**
     * @return $this
     */
    protected function _prepareMassaction()
    {
        return $this;
    }

    /**
     * @return $this
     */
    protected function _prepareColumns()
    {
        $this->addColumn(
            'in_{{siblings}}',
            [
                'header_css_class'  => 'a-center',
                'type'   => 'checkbox',
                'name'   => 'in_{{sibling}}',
                'values' => $this->_getSelected{{Siblings}}(),
                'align'  => 'center',
                'index'  => '{{sibling}}_id'
            ]
        );
        $this->addColumn(
            '{{sibling}}_id',
            [
                'header' => __('ID'),
                'sortable' => true,
                'index' => '{{sibling}}_id',
                'type' => 'number',
                'header_css_class' => 'col-id',
                'column_css_class' => 'col-id'
            ]
        );

        $this->addColumn(
            'title',
            [
                'header' => __('{{SiblingNameAttributeLabel}}'),
                'index' => '{{siblingNameAttributeCode}}',
                'header_css_class' => 'col-name',
                'column_css_class' => 'col-name'
            ]
        );

        $this->addColumn(
            'position',
            [
                'header' => __('Position'),
                'name'   => 'position',
                'width'  => 60,
                'type'   => 'number',
                'validate_class' => 'validate-number',
                'index' => 'position',
                'editable'  => true,
            ]
        );
        return $this;
    }

    /**
     * Retrieve selected {{SiblingsLabel}}

     * @return array
     */
    protected function _getSelected{{Siblings}}()
    {
        ${{siblings}} = $this->get{{Entity}}{{Siblings}}();
        if (!is_array(${{siblings}})) {
            ${{siblings}} = $this->get{{Entity}}()->get{{Siblings}}Position();
            return array_keys(${{siblings}});
        }
        return ${{siblings}};
    }

    /**
     * Retrieve selected {{SiblingsLabel}}

     * @return array
     */
    public function getSelected{{Siblings}}()
    {
        $selected = $this->get{{Entity}}()->get{{Siblings}}Position();
        if (!is_array($selected)) {
            $selected = [];
        } else {
            foreach ($selected as $key => $value) {
                $selected[$key] = ['position' => $value];
            }
        }
        return $selected;
    }

    /**
     * @param \{{Namespace}}\{{Module}}\Model\{{Sibling}}|\Magento\Framework\Object $item
     * @return string
     */
    public function getRowUrl($item)
    {
        return '#';
    }

    /**
     * get grid url
     *
     * @return string
     */
    public function getGridUrl()
    {
        return $this->getUrl(
            '*/*/{{siblings}}Grid',
            [
                '{{entity}}_id' => $this->get{{Entity}}()->getId()
            ]
        );
    }

    /**
     * @return \{{Namespace}}\{{Module}}\Model\{{Entity}}
     */
    public function get{{Entity}}()
    {
        return $this->{{_}}coreRegistry->registry('{{namespace}}_{{module}}_{{entity}}');
    }

    /**
     * @param \Magento\Backend\Block\Widget\Grid\Column $column
     * @return $this
     */
    protected function _addColumnFilterToCollection($column)
    {
        if ($column->getId() == 'in_{{siblings}}') {
            ${{sibling}}Ids = $this->_getSelected{{Siblings}}();
            if (empty(${{sibling}}Ids)) {
                ${{sibling}}Ids = 0;
            }
            if ($column->getFilter()->getValue()) {
                $this->getCollection()->addFieldToFilter('main_table.{{sibling}}_id', ['in'=>${{sibling}}Ids]);
            } else {
                if (${{sibling}}Ids) {
                    $this->getCollection()->addFieldToFilter('main_table.{{sibling}}_id', ['nin'=>${{sibling}}Ids]);
                }
            }
        } else {
            parent::_addColumnFilterToCollection($column);
        }
        return $this;
    }

    /**
     * @return string
     */
    public function getTabLabel()
    {
        return __('{{SiblingsLabel}}');
    }

    /**
     * @return bool
     */
    public function isHidden()
    {
        return false;
    }

    /**
     * @return string
     */
    public function getTabTitle()
    {
        return $this->getTabLabel();
    }

    /**
     * @return bool
     */
    public function canShowTab()
    {
        return true;
    }

    /**
     * @return string
     */
    public function getTabUrl()
    {
        return $this->getUrl('{{namespace}}_{{module}}/{{entity}}/{{siblings}}', ['_current' => true]);
    }

    /**
     * @return string
     */
    public function getTabClass()
    {
        return 'ajax only';
    }
