    /**
     * Form preparation
     *
     * @return void
     */
    protected function _prepareForm()
    {
        /** @var \Magento\Framework\Data\Form $form */
        $form = $this->_formFactory->create(
            [
                'data' => [
                    'id' => 'new_{{entity}}_form',
                    'class' => 'admin__scope-old'
                ]
            ]
        );
        $form->setUseContainer($this->getUseContainer());

        $form->addField('new_{{entity}}_messages', 'note', []);

        $fieldset = $form->addFieldset('new_{{entity}}_form_fieldset', []);

        $fieldset->addField(
            'new_{{entity}}_{{nameAttributeCode}}',
            'text',
            [
                'label' => __('{{NameAttributeLabel}}'),
                'title' => __('{{NameAttributeLabel}}'),
                'required' => true,
                'name' => 'new_{{entity}}_{{nameAttributeCode}}'
            ]
        );
        //TODO: add all required fields here
        $fieldset->addField(
            'new_{{entity}}_parent',
            'select',
            [
                'label' => __('Parent {{EntityLabel}}'),
                'title' => __('Parent {{EntityLabel}}'),
                'required' => false,
                'options' => $this->{{_}}getParent{{Entity}}Options(),
                'class' => 'validate-parent-{{entity}}',
                'name' => 'new_{{entity}}_parent',
                // @codingStandardsIgnoreStart
                'note' => __(
                        'You can reassign the {{EntityLabel}} at any time in ' .
                        '<a href="%1" target="_blank">Manage {{EntitiesLabel}}</a>.',
                    $this->getUrl('{{namespace}}_{{module}}/{{entity}}')
                )
                // @codingStandardsIgnoreEnd
            ]
        );
{{editFormFieldsAsNew}}
        $this->setForm($form);
    }

    /**
     * Get parent {{EntityLabel}} options
     *
     * @return array
     */
    protected function {{_}}getParent{{Entity}}Options()
    {
        $items = $this->{{_}}{{entity}}CollectionFactory->create()
            ->addOrder('{{Entity}}_id','ASC')
            ->setPageSize(3)->load()->getItems();

        $result = [];
        if (count($items) === 2) {
            $item = array_pop($items);
            $result = [$item->get{{Entity}}Id() => $item->get{{NameAttributeCode}}()];
        }

        return $result;
    }

    /**
     * {{EntityLabel}} save action URL
     *
     * @return string
     */
    public function getSave{{EntityLabel}}Url()
    {
        return $this->getUrl('{{namespace}}_{{module}}/{{entity}}/save');
    }

    /**
     * Attach new {{EntityLabel}} dialog widget initialization
     *
     * @return string
     */
    public function getAfterElementHtml()
    {
        $widgetOptions = $this->{{_}}jsonEncoder->encode(
            [
                'suggestOptions' => [
                    'source' => $this->getUrl('{{namespace}}_{{module}}/{{entity}}/suggest{{Entities}}'),
                    'valueField' => '#new_{{entity}}_parent',
                    'className' => '{{entity}}-select',
                    'multiselect' => true,
                    'showAll' => true,
                ],
                'save{{Entity}}Url' => $this->getUrl('{{namespace}}_{{module}}/{{entity}}/save'),
            ]
        );
        //TODO: JavaScript logic should be moved to separate file or reviewed
        return <<<HTML
<script>
require(["jquery","mage/mage"],function($) {  // waiting for dependencies at first
    $(function(){ // waiting for page to load to have '#{{entity}}_ids-template' available
        $('#new-{{entity}}').mage('new{{Entity}}Dialog', $widgetOptions);
    });
});
</script>
HTML;
    }